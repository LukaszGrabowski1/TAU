package pl.edu.pjatk.lab10.service;

import java.sql.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import pl.edu.pjatk.lab10.domain.Item;

public class ItemManagerImpl implements  ItemManager {

    private Connection connection;

    private PreparedStatement addItemStmt;
    private PreparedStatement getAllItemsStmt;
    private PreparedStatement removeItemStmt;
    private PreparedStatement getItemStmt;
    private PreparedStatement updateItemStmt;

    public ItemManagerImpl(Connection connection) throws SQLException {
        this.connection = connection;
        ResultSet rs = connection.getMetaData().
                getTables(null, null, null,null);
        boolean tableExists = false;
        while (rs.next()) {
            if ("Item".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists)
            connection.createStatement().executeUpdate("CREATE TABLE " +
                    "Item(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                    "name varchar(20))");

        addItemStmt = connection.prepareStatement("INSERT INTO Item (name) VALUES (?)");
        removeItemStmt = connection.prepareStatement("DELETE FROM Item WHERE id = ?");
        getAllItemsStmt = connection.prepareStatement("SELECT id, name FROM Item");
        getItemStmt = connection.prepareStatement("SELECT id, name FROM Item WHERE id = ?");
        updateItemStmt = connection.prepareStatement("UPDATE Item SET name = ? WHERE id = ?");
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public int addItem(Item item) {
        int count = 0;
        try {
            addItemStmt.setString(1, item.getName());
            count = addItemStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    public List<Item> getAllItems() {
        List<Item> items = new LinkedList<>();
        try {
            ResultSet rs = getAllItemsStmt.executeQuery();

            while (rs.next()) {
                Item p = new Item();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                items.add(p);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return items;
    }
    
    public Item getItem(long id) {
    	Item item = new Item();
        try {
        	getItemStmt.setLong(1, id);
        	ResultSet rs = getItemStmt.executeQuery();

            while (rs.next()) {
                item.setId(rs.getInt("id"));
                item.setName(rs.getString("name"));
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return item;
    }

	@Override
	public int removeItem(Item item) {
		int count = 0;
		try {
			removeItemStmt.setLong(1, item.getId());
			count = removeItemStmt.executeUpdate();
		} catch (SQLException e) {
			 throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
		return count;
	}

	@Override
	public int updateItem(Item item) {
		int count;
        try {
        	updateItemStmt.setString(1, item.getName());
        	updateItemStmt.setLong(2, item.getId());
        	count = updateItemStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
	}

}
